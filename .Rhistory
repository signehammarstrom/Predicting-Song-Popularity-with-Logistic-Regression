split_data$valid$is_pop <- as.factor(split_data$valid$is_pop)
split_data$test$is_pop <- as.factor(split_data$test$is_pop)
# Define the formula
formula <- as.formula("is_pop ~ danceability + energy + loudness + speechiness")
# Step 2: Tune SVM with RBF kernel by testing different values of C
by <- 0.3  # Step size for tuning C
err_va <- NULL
C_values <- seq(by, 5, by)  # Define a sequence of C values
for (C in C_values) {
svm_model <- ksvm(
formula,
data = split_data$train,
kernel = "rbfdot",
kpar = list(sigma = 0.05),
C = C,
scaled = FALSE,
weights = ifelse(split_data$train$is_pop == 1, 5, 1)  # Adjust weights
)
# Predict on validation set
predictions <- predict(svm_model, split_data$valid)
# Compute misclassification rate
misclass_rate <- misclass(split_data$valid$is_pop, predictions)
err_va <- c(err_va, misclass_rate)
}
# Step 3: Train final SVM model with best C value
best_C <- C_values[which.min(err_va)]  # Get best C based on lowest error
svm_final <- ksvm(
formula,
data = split_data$train,
kernel = "rbfdot",
kpar = list(sigma = 10),
C = best_C,
scaled = TRUE
)
# Step 4: Predict on test data
svm_predictions <- predict(svm_final, split_data$test)
# Step 5: Evaluate Performance
conf_matrix <- confusionMatrix(factor(svm_predictions, levels = c(0,1)), factor(split_data$test$is_pop, levels = c(0,1)))
print(conf_matrix)
svm_final <- ksvm(
formula,
data = split_data$train,
kernel = "rbfdot",
kpar = list(sigma = 10),
C = best_C,
scaled = TRUE,
weights = ifelse(split_data$train$is_pop == 1, 5, 1)  # Adjust weights
)
# Step 4: Predict on test data
svm_predictions <- predict(svm_final, split_data$test)
# Step 5: Evaluate Performance
conf_matrix <- confusionMatrix(factor(svm_predictions, levels = c(0,1)), factor(split_data$test$is_pop, levels = c(0,1)))
print(conf_matrix)
for (C in C_values) {
svm_model <- ksvm(
formula,
data = split_data$train,
kernel = "rbfdot",
kpar = list(sigma = 1),
C = C,
scaled = FALSE,
weights = ifelse(split_data$train$is_pop == 1, 5, 1)  # Adjust weights
)
# Predict on validation set
predictions <- predict(svm_model, split_data$valid)
# Compute misclassification rate
misclass_rate <- misclass(split_data$valid$is_pop, predictions)
err_va <- c(err_va, misclass_rate)
}
# Step 3: Train final SVM model with best C value
best_C <- C_values[which.min(err_va)]  # Get best C based on lowest error
svm_final <- ksvm(
formula,
data = split_data$train,
kernel = "rbfdot",
kpar = list(sigma = 1),
C = best_C,
scaled = TRUE,
weights = ifelse(split_data$train$is_pop == 1, 5, 1)  # Adjust weights
)
# Step 4: Predict on test data
svm_predictions <- predict(svm_final, split_data$test)
# Step 5: Evaluate Performance
conf_matrix <- confusionMatrix(factor(svm_predictions, levels = c(0,1)), factor(split_data$test$is_pop, levels = c(0,1)))
print(conf_matrix)
library(pROC)
library(dplyr)
#' Load and preprocess data
#' @param path1 path to the first dataset.
#' @param path2 path to the second dataset.
#' @return merged dataframe with 'is_pop' as numeric values.
load_and_preprocess_data <- function(path1, path2) {
df1 <- read.csv(path1, sep = ";")
df2 <- read.csv(path2, sep = "")
data <- merge(df1, df2, by = "song_id", all = FALSE)
selected_columns <- c("danceability", "energy", "liveness",
"loudness", "speechiness", "valence", "tempo", "is_pop")
data <- data[selected_columns]
# Convert target to binary numeric
data$is_pop <- as.numeric(data$is_pop == "True")
return (data)
}
#' Split data into train/validation/test sets
#' @param data the data set to be split.
#' @param train_ratio proportion for training data set.
#' @param valid_ratio proportion for validation data set.
#' @return list containing training, validation and test data splitted in
#' given ratios.
split_data <- function(data, train_ratio = 0.4, valid_ratio = 0.3) {
set.seed(12345)
n <- nrow(data)
train_ids <- sample(1:n, size = floor(n * train_ratio))
valid_ids <- sample(setdiff(1:n, train_ids), size = floor(n * valid_ratio))
test_ids <- setdiff(1:n, c(train_ids, valid_ids))
return (list(
train = data[train_ids, ],
valid = data[valid_ids, ],
test = data[test_ids, ]
))
}
#' Compute misclassification rate
#' @param true The true value.
#' @param predicted The predicted value.
#' @return misclassification rate as numeric value.
misclass <- function(true, predicted) {
n <- length(true)
return(1 - sum(diag(table(true, predicted))) / n)
}
library(glmnet)
#' Make predictions
#' @param r classification threshold.
#' @param model model used to make prediction.
#' @param newdata the data to make predictions on.
#' @return list containing predicted probabilities, predictions and misclassification rate
#' for the model when predicting on the given newdata.
predict_func <- function(r, model, newdata) {
pred_prob <- predict(model, newdata = newdata, type = "response")
predictions <- ifelse(pred_prob > r, 1, 0)
# Compute misclassification rate
misclass_rate <- misclass(newdata$is_pop, predictions)
return (list(pred_prob = pred_prob, predictions = predictions, misclass_rate = misclass_rate))
}
#' Train and evaluate logistic regression
#' @param data the data set used for the logistic regression.
#' @param r classification threshold.
#' @return list containing the logistic regression model, its predictions and
#' misclassification rate.
train_and_evaluate_logistic <- function(split_data, r) {
# Train logistic regression model
model <- glm(is_pop ~ .,
family = binomial, data = split_data$train)
# Predict on validation and test datasets
valid_pred <- predict_func(r, model, split_data$valid)
test_pred <- predict_func(r, model, split_data$test)
# Print misclassification rate
cat("Logistic Regression Validation Misclassification Rate:", valid_pred$misclass_rate, "\n")
cat("Logistic Regression Test Misclassification Rate:", test_pred$misclass_rate, "\n")
return(list(model = model, predictions = valid_pred$predictions, pred_prob = valid_pred$pred_prob,
misclass_rate = valid_pred$misclass_rate))
}
# Step 1: Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Step 2: Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
library(caret)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
library(pROC)
# Calculate ROC curve
roc_curve <- roc(split_data$valid$is_pop, logistic_results$pred_prob)
# Plot ROC curve
plot(roc_curve, main = "ROC Curve", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "red")  # Add diagonal line
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Step 1: Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Step 2: Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
# Calculate ROC curve
roc_curve <- roc(split_data$valid$is_pop, logistic_results$pred_prob)
# Plot ROC curve
plot(roc_curve, main = "ROC Curve", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "red")  # Add diagonal line
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Step 1: Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Step 2: Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
# Calculate ROC curve
roc_curve <- roc(split_data$valid$is_pop, logistic_results$pred_prob)
# Plot ROC curve
plot(roc_curve, main = "ROC Curve", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "red")  # Add diagonal line
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Step 1: Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Step 2: Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Step 1: Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Step 2: Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- logistic_results$predictions
actual_classes <- split_data$valid$is_pop
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Step 1: Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Step 2: Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
# Calculate ROC curve
roc_curve <- roc(split_data$valid$is_pop, logistic_results$pred_prob)
# Plot ROC curve
plot(roc_curve, main = "ROC Curve", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "red")  # Add diagonal line
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.4, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.3, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.3, valid_ratio = 0.2)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.3, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.3, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
library(caret)
library(pROC)
# Load required scripts
source("scripts/data_preprocessing.R")
source("scripts/logistic_regression_model.R")
source("scripts/evaluation.R")
# Load and preprocess data
data <- load_and_preprocess_data("data/acoustic_features.csv", "data/song_pop.csv")
split_data <- split_data(data, train_ratio = 0.3, valid_ratio = 0.3)
# Logistic Regression
logistic_results <- train_and_evaluate_logistic(split_data, r = 0.4)
summary(logistic_results$model)
# Convert predictions to factor
predicted_classes <- factor(logistic_results$predictions, levels = c(0,1))
actual_classes <- factor(split_data$valid$is_pop, levels = c(0,1))
# Generate confusion matrix
conf_matrix <- confusionMatrix(predicted_classes, actual_classes)
print(conf_matrix)
roc_evaluation <- roc_evaluation(split_data$valid$is_pop, logistic_results$pred_prob)
